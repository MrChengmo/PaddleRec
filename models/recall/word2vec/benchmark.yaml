# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
workspace: "./"

hyper_parameters:
  optimizer:
    learning_rate: 1.0
    decay_steps: 100000
    decay_rate: 0.999
    class: sgd
  sparse_feature_number: 354051
  sparse_feature_dim: 300
  with_shuffle_batch: False
  neg_num: 5
  window_size: 5

# select runner by name
mode: [ps_cpu_dataset_async]
# config of each runner.
# runner is a kind of paddle training class, which wraps the train/infer process.
runner:
- name: ps_cpu_dataset_async
  class: cluster
  epochs: 5
  device: cpu
  fleet_mode: ps
  distribute_strategy: async
  runner_result_dump_path: "w2v_training_metric"
  save_checkpoint_interval: 1 # save model interval of epochs
  save_checkpoint_path: "w2v_model" # save checkpoint path
  print_interval: 1000
  phases: [phase1]
- name: ps_cpu_dataset_geo
  class: cluster
  epochs: 5
  device: cpu
  fleet_mode: ps
  distribute_strategy: geo
  runner_result_dump_path: "w2v_training_metric"
  save_checkpoint_interval: 1 # save model interval of epochs
  save_checkpoint_path: "word2vec_model" # save checkpoint path
  print_interval: 1000
  phases: [phase1]
- name: ps_cpu_dataloader_async
  class: cluster
  epochs: 5
  device: cpu
  fleet_mode: ps
  distribute_strategy: geo
  runner_result_dump_path: "w2v_training_metric"
  save_checkpoint_interval: 1 # save model interval of epochs
  save_checkpoint_path: "word2vec_model" # save checkpoint path
  print_interval: 1000
  phases: [phase2]
- name: ps_cpu_dataloadet_geo
  class: cluster
  epochs: 5
  device: cpu
  fleet_mode: ps
  distribute_strategy: geo
  runner_result_dump_path: "w2v_training_metric"
  save_checkpoint_interval: 1 # save model interval of epochs
  save_checkpoint_path: "word2vec_model" # save checkpoint path
  print_interval: 1000
  phases: [phase2]
- name: single_cpu_infer
  class: infer
  # device to run training or infer
  device: cpu
  runner_result_dump_path: "w2v_infer_metric"
  init_model_path: "word2vec_model" # load model path
  print_interval: 1
  phases: [phase3]

# runner will run all the phase in each epoch
phase:
- name: phase1
  model: "{workspace}/model.py" # user-defined model
  dataset_name: dataset_train # select dataset by name
  thread_num: 16
- name: phase2
  model: "{workspace}/model.py" # user-defined model
  dataset_name: dataloader_train # select dataset by name
  thread_num: 16
- name: phase3
  model: "{workspace}/model.py" # user-defined model
  dataset_name: dataset_infer # select dataset by name
  thread_num: 1

# list of dataset
dataset:
- name: dataset_train # name of dataset to distinguish different datasets
  batch_size: 100
  type: QueueDataset # or QueueDataset
  data_path: "{workspace}/data/train"
  word_count_dict_path: "{workspace}/data/dict/word_count_dict.txt"
  data_converter: "{workspace}/w2v_reader.py"
- name: dataloader_train # name of dataset to distinguish different datasets
  batch_size: 100
  type: DataLoader # or QueueDataset
  data_path: "{workspace}/data/train"
  word_count_dict_path: "{workspace}/data/dict/word_count_dict.txt"
  data_converter: "{workspace}/w2v_reader.py"
- name: dataset_infer # name
  batch_size: 2000
  type: DataLoader # or QueueDataset
  data_path: "{workspace}/data/test"
  word_id_dict_path: "{workspace}/data/dict/word_id_dict.txt"
  data_converter: "{workspace}/w2v_evaluate_reader.py"
